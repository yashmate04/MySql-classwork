-- Step 1: Create or use an existing database
CREATE DATABASE CompanyDB;
USE CompanyDB;
Drop database CompanyDB;

-- Part A : Create Employees table
CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    Name VARCHAR(100),
    Department VARCHAR(50),
    Salary DECIMAL(10,2)
);

INSERT INTO Employees (EmpID, Name, Department, Salary)
VALUES
(101, 'Yash Sharma', 'HR', 45000.00),
(102, 'Sahil Mehta', 'IT', 60000.00),
(103, 'Viraj Verma', 'Finance', 52000.00),
(104, 'Prathmesh Gupta', 'Marketing', 48000.00),
(105, 'Harshal Singh', 'Sales', 55000.00);

  -- Select all records from Flights table
select * FROM Employees;

Update Employees
SET Salary = 60000.00
where EmpID = 105;

DELETE From Employees
WHERE Department = 'HR';

SELECT *
From Employees
whERE Department = 'Finance';

-- Part B
SELECT *
FROM Employees
ORDER BY Salary DESC
LIMIT 3;

SELECT Department, SUM(Salary) AS TotalSalary
FROM Employees
GROUP BY Department;

SELECT *
from Employees
WHERE Salary > 50000 AND Salary < 80000;

SELECT *
FROM Employees
where Name LIKE 'A%';

-- Part-C
CREATE TABLE Students (
    RollNo INT unique,
    Name varchar(100),
    Marks INT CHECK (Marks >= 0)
);

ALTER TABLE Employees
add Email VARCHAR(100) NOT NULL;

alter table Employees
MODIFY Email varchar(100) NOT NULL;

-- Step 1: Create Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100) NOT NULL,
    Email VARCHAR(100),
    Phone VARCHAR(15)
);

-- Step 2: Create Orders table refere to  Customers
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATE,
    Amount DECIMAL(10,2),
    CustomerID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Part D
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100) NOT NULL,
    Email VARCHAR(100),
    Phone VARCHAR(15)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATE,
    Amount DECIMAL(10,2),
    CustomerID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
INSERT INTO Customers (CustomerID, CustomerName, Email, Phone) VALUES
(1, 'Amit Sharma', 'amit.sharma@example.com', '9876543210'),
(2, 'Priya Mehta', 'priya.mehta@example.com', '9123456780'),
(3, 'Rahul Verma', 'rahul.verma@example.com', '9988776655'),
(4, 'Sneha Gupta', 'sneha.gupta@example.com', '9876123450'),
(5, 'Vikram Singh', 'vikram.singh@example.com', '9765432109');

INSERT INTO Orders (OrderID, OrderDate, Amount, CustomerID) VALUES
(101, '2025-09-01', 2500.00, 1),
(102, '2025-09-03', 1800.50, 2),
(103, '2025-09-05', 3200.75, 3),
(104, '2025-09-07', 1500.00, 4),
(105, '2025-09-10', 2800.25, 5);

select Customers.CustomerName, Orders.OrderID, Orders.OrderDate, Orders.Amount
FROM Customers
inner JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

select Employees.Name, Projects.ProjectName
FROM Employees
left JOIN Projects ON Employees.EmpID = Projects.EmpID;

select Employees.Name, Departments.DepartmentName
FROM Employees
RIGHT join Departments ON Employees.Department = Departments.DepartmentName;

SELECT Employees.Name
FROM Employees
LEFT JOIN Projects ON Employees.EmpID = Projects.EmpID
WHERE Projects.ProjectID IS NULL;

SELECT EmpID, Name, Department, Salary
FROM Branch_A_Employees
UNION
SELECT EmpID, Name, Department, Salary
FROM Branch_B_Employees;

-- Part E 
select MAX(Salary) AS SecondHighestSalary
FROM Employees
where Salary < (SELECT MAX(Salary) FROM Employees);

select Name, Salary
FROM Employees
where Salary > (SELECT AVG(Salary) FROM Employees);

SELECT Name, Department
FROM Employees
WHERE Department = (SELECT Department FROM Employees WHERE Name = 'Rohit');

SELECT Customers.CustomerName, Orders.OrderID, Orders.Amount
FROM Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID
where Orders.Amount > (SELECT AVG(Amount) FROM Orders);

-- Part F 
--  Display the current date and time
select NOW() AS CurrentDateTime;

-- show the length of each employeeâ€™s name using LENGTH()
select Name, LENGTH(Name) AS NameLength
FROM Employees;

-- Retrieve the total number of employees
SELECT COUNT(*) AS TotalEmployees
FROM Employees;

DELIMITER //

create FUNCTION GetBonus(empSalary DECIMAL(10,2))
RETURNS decimal(10,2)
DETERMINISTIC
begin
    RETURN empSalary * 0.10;
END;
//

DELIMITER ;

-- Use the function to display EmpID, Name, and Bonus
SELECT EmpID, Name, GetBonus(Salary) AS Bonus
FROM Employees;














